package com.example.gymmanagementsystem.models.service;


import com.example.gymmanagementsystem.helpers.DbConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalTime;

public class BackupModel {
    private static final Connection connection = DbConnection.getConnection();
    //    private static final ObservableList<String> fullBackupInfo = FXCollections.observableArrayList();
    private static final ObservableList<String> paths = FXCollections.observableArrayList();

    public void insertPath(String path) throws SQLException {
        Statement statement = connection.createStatement();
        statement.execute("INSERT INTO backup_table(location) VALUES('" + path + "')");
    }

    public ObservableList<String> backupPaths() throws SQLException {

        Statement statement = connection.createStatement();

        ResultSet rs = statement.executeQuery("SELECT * FROM backup_table;");

        while (rs.next()) {
            paths.add(rs.getString("location"));
        }
        rs.close();
        statement.close();
        return paths;
    }

    public void backUp(String path) throws SQLException {
        Statement statement = connection.createStatement();
        connection.setAutoCommit(false);
        try {
            String query = "BACKUP to " + path;
            statement.executeUpdate(query);
            String lastBackup = "UPDATE backup_table SET last_backup='" + LocalDate.now() +
                    " " + LocalTime.now() + "' WHERE location='" + path + "'";
            boolean good = statement.execute(lastBackup);
            if (good) {
                System.out.println("Updated");
            } else {
                System.out.println("Inserted");
                //statement.executeUpdate("INSERT INTO backup_table(location) VALUES('" + path + "')");
            }
            //     connection.commit();
        } catch (SQLException e) {
            connection.rollback();
            throw e;
        }
    }

    public void restore(String path) throws SQLException {
        String query = "RESTORE FROM " + path;
        Statement statement = connection.createStatement();
        statement.executeUpdate(query);
    }
}



  public void backup(String path, boolean newPath) throws SQLException {
        connection.setAutoCommit(false);
        try {
            Statement statement = connection.createStatement();
            String query = "BACKUP to " + path;
            statement.executeUpdate(query);
            if (newPath) {
                System.out.println("Inserted");
                String insertPath = "INSERT INTO backup_table(location) VALUES('" + path + "')";
                statement.execute(insertPath);

            } else {
                System.out.println("Updated");
                String lastBackup = "UPDATE backup_table SET last_backup='" + LocalDate.now() +
                        " " + LocalTime.now() + "' WHERE location='" + path + "'";
                statement.execute(lastBackup);

            }
            connection.commit();
        } catch (SQLException e) {
            e.printStackTrace();
            connection.rollback();
            throw e;
        }
    }

